{"ast":null,"code":"var _jsxFileName = \"/Users/akhilanori/Documents/Expense_Tracker_React/src/components/NewExpenses/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport './ExpenseForm.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const [initialEnteredTitle, functionForUpdatingTheState] = useState(''); //initially its an empty string, \n  //bcz initially when the component was rendered, nothing was rendered\n  //set the state for titleStateHandler, we are not passing anything \n  // to initialEnteredTitle ---> just user input \n\n  const [initialEnteredAmount, setAmountFunction] = useState('');\n  const [initalEnteredDate, setDateFunction] = useState('');\n\n  //storing the empty strings in useState('') --> as by default when you \n  //listen to the change input, you read the value of the input element\n  // it will always be a string ... we always get a string event.target.value\n\n  //this function will be called when the event onChange is executed\n  const titleChangeHandler = event => {\n    //Even though we don't explicitly specify event object here -> in React,\n    //this is the default behaviour of JavaScript in browsers\n    //For us React/browser makes sure that we get event object when ---\n    //the event change occurs\n    functionForUpdatingTheState(event.target.value); //I get the current value which I enter\n    //with every key stroke \n    //passing the current entered value as parameter/argument to functionForUpdatingTheState\n    //function \n    //This will be stored in our state \n\n    console.log('Akhila Nori', initialEnteredTitle);\n    console.log('Updating Akhila', {\n      functionForUpdatingTheState\n    });\n  };\n  const amountChangeHandler = event => {\n    //this function should get triggered when the amount changes \n    setAmountFunction(event.target.value);\n  };\n  const dateChangehandler = event => {\n    setDateFunction(event.target.value);\n  };\n  const formSubmitHandler = event => {\n    //we get an event object here automatically when event change occurs\n    // from formSubmitHandler event when it executes, we get event object here\n\n    event.preventDeafult(); //everytime we click on submit button the browser\n    //refreshes the webpage.... to prevent the Default refreshing of our \n    // webpage we use this in-build function \n\n    const combinedExpenseDataObject = {\n      title: initialEnteredTitle,\n      amount: initialEnteredAmount,\n      date: new Date(initalEnteredDate)\n      //a new Date constructor --> to that we are passing string of data\n      //which will inturn convert into a Date object\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2023-01-01\",\n          max: \"2040-12-31\",\n          onChange: dateChangehandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 13\n  }, this);\n};\n_s(ExpenseForm, \"CTyr4YI8Tf77IecD1EoFssvV4kU=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ExpenseForm","_s","initialEnteredTitle","functionForUpdatingTheState","initialEnteredAmount","setAmountFunction","initalEnteredDate","setDateFunction","titleChangeHandler","event","target","value","console","log","amountChangeHandler","dateChangehandler","formSubmitHandler","preventDeafult","combinedExpenseDataObject","title","amount","date","Date","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["/Users/akhilanori/Documents/Expense_Tracker_React/src/components/NewExpenses/ExpenseForm.js"],"sourcesContent":["import './ExpenseForm.css'\nimport {useState} from 'react';\n\n\nconst ExpenseForm = () => {\n\n    const [initialEnteredTitle, functionForUpdatingTheState] = useState(''); //initially its an empty string, \n    //bcz initially when the component was rendered, nothing was rendered\n    //set the state for titleStateHandler, we are not passing anything \n    // to initialEnteredTitle ---> just user input \n    \n\n    const [initialEnteredAmount, setAmountFunction]= useState('');\n\n    const [initalEnteredDate, setDateFunction] = useState('')\n\n    //storing the empty strings in useState('') --> as by default when you \n    //listen to the change input, you read the value of the input element\n    // it will always be a string ... we always get a string event.target.value\n\n\n    //this function will be called when the event onChange is executed\n    const titleChangeHandler = (event) => {\n        //Even though we don't explicitly specify event object here -> in React,\n        //this is the default behaviour of JavaScript in browsers\n        //For us React/browser makes sure that we get event object when ---\n        //the event change occurs\n        functionForUpdatingTheState(event.target.value) //I get the current value which I enter\n                //with every key stroke \n       //passing the current entered value as parameter/argument to functionForUpdatingTheState\n       //function \n       //This will be stored in our state \n\n       console.log('Akhila Nori',initialEnteredTitle)\n       console.log('Updating Akhila',{functionForUpdatingTheState})\n\n    }\n\n    const amountChangeHandler = (event) => {\n        //this function should get triggered when the amount changes \n        setAmountFunction(event.target.value);\n    }\n\n    const dateChangehandler = (event) => {\n        setDateFunction(event.target.value)\n\n    }\n\n    const formSubmitHandler = (event) => {\n        //we get an event object here automatically when event change occurs\n        // from formSubmitHandler event when it executes, we get event object here\n       \n        event.preventDeafult(); //everytime we click on submit button the browser\n        //refreshes the webpage.... to prevent the Default refreshing of our \n        // webpage we use this in-build function \n\n        const combinedExpenseDataObject = {\n            title: initialEnteredTitle,\n            amount: initialEnteredAmount,\n            date: new Date(initalEnteredDate)\n            //a new Date constructor --> to that we are passing string of data\n            //which will inturn convert into a Date object\n        }\n\n\n    }\n\n    return(     \n            <form onSubmit={formSubmitHandler}>\n                <div className=\"new-expense__controls\">\n\n                    <div className=\"new-expense__control\">\n                       <label>Title</label>\n                       <input type=\"text\" onChange={titleChangeHandler} />\n                       {/* function that will be executed when onChange event listener \n                       is executed */}\n                     </div>  \n\n                     <div className=\"new-expense-control\">\n                        <label>Amount</label>\n                        <input type='number' min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler} />\n                     </div>\n\n                     <div className=\"new-expense-control\">\n                        <label>Date</label>\n                        <input type='date' min=\"2023-01-01\" max=\"2040-12-31\" onChange={dateChangehandler} />\n                     </div>\n\n                 </div>\n\n            <div className=\"new-expense__actions\">\n                <button type=\"submit\">Add Expense</button>\n            </div>\n\n            </form>\n    )\n\n}\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}