{"ast":null,"code":"var _jsxFileName = \"/Users/akhilanori/Documents/Expense_Tracker_React/src/components/NewExpenses/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport './ExpenseForm.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const [initialEnteredTitle, functionForUpdatingTheState] = useState(''); //initially its an empty string, \n  //bcz initially when the component was rendered, nothing was rendered\n  //set the state for titleStateHandler, we are not passing anything \n  // to initialEnteredTitle ---> just user input \n\n  const [initialEnteredAmount, setAmountFunction] = useState('');\n  const [initalEnteredDate, setDateFunction] = useState('');\n\n  //storing the empty strings in useState('') --> as by default when you \n  //listen to the change input, you read the value of the input element\n  // it will always be a string ... we always get a string event.target.value\n\n  //this function will be called when the event onChange is executed\n  const titleChangeHandler = event => {\n    //Even though we don't explicitly specify event object here -> in React,\n    //this is the default behaviour of JavaScript in browsers\n    //For us React/browser makes sure that we get event object when ---\n    //the event change occurs\n    functionForUpdatingTheState(event.target.value); //I get the current value which I enter\n    //with every key stroke \n    //passing the current entered value as parameter/argument to functionForUpdatingTheState\n    //function \n    //This will be stored in our state \n  };\n\n  const amountChangeHandler = event => {\n    //this function should get triggered when the amount changes \n    setAmountFunction(event.target.value);\n  };\n  const dateChangehandler = event => {\n    setDateFunction(event.target.value);\n  };\n  const formSubmitHandler = event => {\n    //we get an event object here automatically when event change occurs\n    // from formSubmitHandler event when it executes, we get event object here\n\n    event.preventDeafult(); //everytime we click on submit button the browser\n    //refreshes the webpage.... to prevent the Default refreshing of our \n    // webpage we use this in-build function \n    console.log('HI', event);\n    const combinedExpenseDataObject = {\n      titleAkhila: initialEnteredTitle,\n      amountAkhila: initialEnteredAmount,\n      dateAkhila: new Date(initalEnteredDate)\n      //a new Date constructor --> to that we are passing string of data\n      //which will inturn convert into a Date object\n    };\n\n    console.log(combinedExpenseDataObject);\n    functionForUpdatingTheState('');\n    setAmountFunction(''); //setting it to initial value i.e, empty string\n    //and clearing the data, after user enters\n    setDateFunction('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: () => formSubmitHandler(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: initialEnteredTitle\n          //here we just don't lsiten to the changes in the input to update our\n          //state --> but we also here are feeding back the changes into \n          //input --> so that when we change the state, we also change \n          // the input \n          ,\n\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: initialEnteredAmount\n          //to pass it back into the entered input -> when state updates\n          ,\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: initalEnteredDate\n          //pass the entered date back into the input using value attribute\n          ,\n          min: \"2023-01-01\",\n          max: \"2040-12-31\",\n          onChange: dateChangehandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 13\n  }, this);\n};\n_s(ExpenseForm, \"CTyr4YI8Tf77IecD1EoFssvV4kU=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ExpenseForm","_s","initialEnteredTitle","functionForUpdatingTheState","initialEnteredAmount","setAmountFunction","initalEnteredDate","setDateFunction","titleChangeHandler","event","target","value","amountChangeHandler","dateChangehandler","formSubmitHandler","preventDeafult","console","log","combinedExpenseDataObject","titleAkhila","amountAkhila","dateAkhila","Date","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["/Users/akhilanori/Documents/Expense_Tracker_React/src/components/NewExpenses/ExpenseForm.js"],"sourcesContent":["import './ExpenseForm.css'\nimport {useState} from 'react';\n\n\nconst ExpenseForm = () => {\n\n    const [initialEnteredTitle, functionForUpdatingTheState] = useState(''); //initially its an empty string, \n    //bcz initially when the component was rendered, nothing was rendered\n    //set the state for titleStateHandler, we are not passing anything \n    // to initialEnteredTitle ---> just user input \n    \n\n    const [initialEnteredAmount, setAmountFunction]= useState('');\n\n    const [initalEnteredDate, setDateFunction] = useState('')\n\n    //storing the empty strings in useState('') --> as by default when you \n    //listen to the change input, you read the value of the input element\n    // it will always be a string ... we always get a string event.target.value\n\n\n    //this function will be called when the event onChange is executed\n    const titleChangeHandler = (event) => {\n        //Even though we don't explicitly specify event object here -> in React,\n        //this is the default behaviour of JavaScript in browsers\n        //For us React/browser makes sure that we get event object when ---\n        //the event change occurs\n        functionForUpdatingTheState(event.target.value) //I get the current value which I enter\n                //with every key stroke \n       //passing the current entered value as parameter/argument to functionForUpdatingTheState\n       //function \n       //This will be stored in our state \n\n       \n\n    }\n\n    const amountChangeHandler = (event) => {\n        //this function should get triggered when the amount changes \n        setAmountFunction(event.target.value);\n    }\n\n    const dateChangehandler = (event) => {\n        setDateFunction(event.target.value)\n\n    }\n\n    const formSubmitHandler = (event) => {\n        //we get an event object here automatically when event change occurs\n        // from formSubmitHandler event when it executes, we get event object here\n       \n        event.preventDeafult(); //everytime we click on submit button the browser\n        //refreshes the webpage.... to prevent the Default refreshing of our \n        // webpage we use this in-build function \n       console.log('HI', event)\n        const combinedExpenseDataObject = {\n            titleAkhila: initialEnteredTitle,\n            amountAkhila: initialEnteredAmount,\n            dateAkhila: new Date(initalEnteredDate)\n            //a new Date constructor --> to that we are passing string of data\n            //which will inturn convert into a Date object\n        };\n        console.log(combinedExpenseDataObject)\n\n\n        functionForUpdatingTheState('');\n        setAmountFunction(''); //setting it to initial value i.e, empty string\n                           //and clearing the data, after user enters\n        setDateFunction('');                   \n\n    }\n\n    return(     \n\n            <form onSubmit={()=>formSubmitHandler()}>\n                <div className=\"new-expense__controls\">\n\n                    <div className=\"new-expense__control\">\n                       <label>Title</label>\n                       <input type=\"text\"\n\n                       value={initialEnteredTitle}\n                       //here we just don't lsiten to the changes in the input to update our\n                       //state --> but we also here are feeding back the changes into \n                       //input --> so that when we change the state, we also change \n                       // the input \n\n                        onChange={titleChangeHandler} />\n                       {/* function that will be executed when onChange event listener \n                       is executed */}\n                     </div>  \n\n                     <div className=\"new-expense-control\">\n                        <label>Amount</label>\n                        <input type='number'\n                        value={initialEnteredAmount}\n                        //to pass it back into the entered input -> when state updates\n                         min=\"0.01\" \n                         step=\"0.01\" \n                         onChange={amountChangeHandler} />\n                     </div>\n\n                     <div className=\"new-expense-control\">\n                        <label>Date</label>\n                        <input type='date'\n                        value={initalEnteredDate}\n                        //pass the entered date back into the input using value attribute\n                         min=\"2023-01-01\"\n                         max=\"2040-12-31\"\n                         onChange={dateChangehandler} />\n                     </div>\n\n                 </div>\n\n            <div className=\"new-expense__actions\">\n                <button type=\"submit\">Add Expense</button>\n            </div>\n\n            </form>\n    )\n\n}\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}